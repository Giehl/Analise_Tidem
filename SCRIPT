# Para dúvidas ou informações: samoelgiehl@gmail.com 
# Declarar as bibliotecas #############################################################################################

library(oce)
library(SWMPr)

# Diretório dos dados no computador ###################################################################################
# Os arquivos devem apresentar três colunas: data (dd/mm/aaaa);  horário (hh:mm:ss) e o valor do nível d’água (metros)

file='link.txt'

v <-read.table(file, header = FALSE, sep = "", dec = ".")
nl<-nrow(v['V1'])
elev <- as.numeric(unlist(v['V3']))
answer <- c()

# Aplicar o filtro três sigma  ########################################################################################

sigma=3
teste<- 
  function (elev,sigma) {
    des_padrao<- sd(na.omit(elev))
    media<- mean(na.omit(elev))
    teste_menos=media-sigma*des_padrao
    teste_mais=media+sigma*des_padrao
    answer = c()
    for (val in elev) {
      tes=(is.na(val))
      if(tes==TRUE){
        t=NaN
      } 
      else{
        if(val < teste_mais & val>teste_menos){
          t=val
        } 
        else{
          t=NaN
        }}
      answer <- append(answer, t)
    }
    return(answer)}

elevation<-teste(elev,sigma)

# Estabelecer o tempo inicial (ti) e final (tf) #####################################################################################

ti<-strptime(v[1,'V1']:v[1,'V2'],format='%d/%m/%Y:%H:%M:%S')
tf<-strptime(v[nl,'V1']:v[nl,'V2'],format='%d/%m/%Y:%H:%M:%S')
xx<-as.POSIXct(c(ti,tf))
time<-seq(xx[1], xx[2], by = "5 min")

# Confeccionar as Marés Sintéticas (MSs) ##############################################################################

datsl <- as.sealevel(elevation, time)
MS=predict(tidem(datsl))

# Plotar o gráfico dos dados observados, das Marés Sintéticas e dos resíduos ##########################################

oce.plot.ts(time, elevation, type='l', ylab="Nível d'água [m]", ylim=c(-1, 3.5),xlab="Período [Anos]",col="black",xaxs='i')#, drawTimeRange=FALSE)
legend("topright", col=c("black",alpha("orange", 0.8),"red"),
       legend=c("Dados observados (RMPG)","Maré sintética (Tidem)" ,"Resíduos"), lwd=2.8)
abline(h=0, col="black",lwd=2)
lines(time, MS, col=alpha("orange", 0.8))
lines(time, elevation - MS, col="red")

# Calcular a média, o desvio padrão e o coeficiente de correlação de Pearson entre as MSs e os dados observados########

print("Média e desvio dos resíduos:")
print(mean((na.omit(elevation - MS))))
print(sd((na.omit(elevation - MS))))
print("Média e desvio dos MSs:")
print(mean((na.omit(MS))))
print(sd((na.omit(MS))))
print("Média e desvio dados observados:")
print(mean((na.omit(elevation))))
print(sd((na.omit(elevation))))
print("Coeficiente de corrlação de Pearson:")
print(cor(na.omit(MS),na.omit(elevation),  method = "pearson"))

# Verificar se a distribuição das MSs são semelhantes à curva normal ###################################################

d1<-na.omit(MS)
m<-(mean(d1))
std<-(sd(d1))
hist(d1, density=20, breaks=20, prob=TRUE, 
     xlab="Nível d'água [m]", ylab="Densidade", ylim=c(0, 3), 
     main="Histograma (Marés Sintéticas)")
curve(dnorm(x, mean=m, sd=std), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")

# Verificar se a distribuição dos dados maregráficos in situ são semelhantes à curva normal ############################

d2<-na.omit(elevation)
m<-(mean(d2))
std<-(sd(d2))
hist(d2, density=20, breaks=20, prob=TRUE, 
     xlab="Nível d'água [m]", ylab="Densidade", ylim=c(0, 3), 
     main="Histograma (Observações in situ)")
curve(dnorm(x, mean=m, sd=std), 
      col="darkblue", lwd=2, add=TRUE, yaxt="n")
